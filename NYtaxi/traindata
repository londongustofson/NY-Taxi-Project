{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dependencies\n",
    "import json\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "import calendar\n",
    "import statsmodels.formula.api as sm\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from datetime import datetime\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load the full dataset and conduct data cleaning\n",
    "train_data=pd.read_csv('Resources/train.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.542386e+07</td>\n",
       "      <td>5.542386e+07</td>\n",
       "      <td>5.542386e+07</td>\n",
       "      <td>5.542348e+07</td>\n",
       "      <td>5.542348e+07</td>\n",
       "      <td>5.542386e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.134505e+01</td>\n",
       "      <td>-7.250968e+01</td>\n",
       "      <td>3.991979e+01</td>\n",
       "      <td>-7.251121e+01</td>\n",
       "      <td>3.992068e+01</td>\n",
       "      <td>1.685380e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.071083e+01</td>\n",
       "      <td>1.284888e+01</td>\n",
       "      <td>9.642353e+00</td>\n",
       "      <td>1.278220e+01</td>\n",
       "      <td>9.633346e+00</td>\n",
       "      <td>1.327664e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-3.000000e+02</td>\n",
       "      <td>-3.442060e+03</td>\n",
       "      <td>-3.492264e+03</td>\n",
       "      <td>-3.442025e+03</td>\n",
       "      <td>-3.547887e+03</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>-7.399207e+01</td>\n",
       "      <td>4.073493e+01</td>\n",
       "      <td>-7.399140e+01</td>\n",
       "      <td>4.073403e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.500000e+00</td>\n",
       "      <td>-7.398180e+01</td>\n",
       "      <td>4.075265e+01</td>\n",
       "      <td>-7.398015e+01</td>\n",
       "      <td>4.075316e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.250000e+01</td>\n",
       "      <td>-7.396708e+01</td>\n",
       "      <td>4.076713e+01</td>\n",
       "      <td>-7.396367e+01</td>\n",
       "      <td>4.076810e+01</td>\n",
       "      <td>2.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.396336e+04</td>\n",
       "      <td>3.457626e+03</td>\n",
       "      <td>3.408790e+03</td>\n",
       "      <td>3.457622e+03</td>\n",
       "      <td>3.537133e+03</td>\n",
       "      <td>2.080000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
       "count  5.542386e+07      5.542386e+07     5.542386e+07       5.542348e+07   \n",
       "mean   1.134505e+01     -7.250968e+01     3.991979e+01      -7.251121e+01   \n",
       "std    2.071083e+01      1.284888e+01     9.642353e+00       1.278220e+01   \n",
       "min   -3.000000e+02     -3.442060e+03    -3.492264e+03      -3.442025e+03   \n",
       "25%    6.000000e+00     -7.399207e+01     4.073493e+01      -7.399140e+01   \n",
       "50%    8.500000e+00     -7.398180e+01     4.075265e+01      -7.398015e+01   \n",
       "75%    1.250000e+01     -7.396708e+01     4.076713e+01      -7.396367e+01   \n",
       "max    9.396336e+04      3.457626e+03     3.408790e+03       3.457622e+03   \n",
       "\n",
       "       dropoff_latitude  passenger_count  \n",
       "count      5.542348e+07     5.542386e+07  \n",
       "mean       3.992068e+01     1.685380e+00  \n",
       "std        9.633346e+00     1.327664e+00  \n",
       "min       -3.547887e+03     0.000000e+00  \n",
       "25%        4.073403e+01     1.000000e+00  \n",
       "50%        4.075316e+01     1.000000e+00  \n",
       "75%        4.076810e+01     2.000000e+00  \n",
       "max        3.537133e+03     2.080000e+02  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#descriptives of train_data to spot any thing that requires cleaning\n",
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "#drop the rows that fares are negative or equal to 0\n",
    "train_cleaned = train_data.drop(train_data[train_data['fare_amount']<=0].index)\n",
    "\n",
    "#making sure all pick-up and drop-off are based inside New York City.\n",
    "#New York City latitude and longitude range is: North Latitude: 40.917577 South Latitude: 40.477399 East Longitude: -73.700272 West Longitude: -74.259090\n",
    "#Source: https://www.mapdevelopers.com/geocode_bounding_box.php\n",
    "#Data out of the range will be cleaned out\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['pickup_longitude']>-73.700272].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['pickup_longitude']<-74.259090].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['dropoff_longitude']>-73.700272].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['dropoff_longitude']<-74.259090].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['pickup_latitude']>40.917577].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['pickup_latitude']<40.477399].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['dropoff_latitude']>40.917577].index)\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['dropoff_latitude']<40.477399].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.418420e+07</td>\n",
       "      <td>5.418420e+07</td>\n",
       "      <td>5.418420e+07</td>\n",
       "      <td>5.418386e+07</td>\n",
       "      <td>5.418386e+07</td>\n",
       "      <td>5.418420e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.128510e+01</td>\n",
       "      <td>-7.397550e+01</td>\n",
       "      <td>4.075085e+01</td>\n",
       "      <td>-7.397464e+01</td>\n",
       "      <td>4.075121e+01</td>\n",
       "      <td>1.685435e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.634578e+01</td>\n",
       "      <td>3.444641e-02</td>\n",
       "      <td>2.689378e-02</td>\n",
       "      <td>3.383861e-02</td>\n",
       "      <td>3.072447e-02</td>\n",
       "      <td>1.315407e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e-02</td>\n",
       "      <td>-7.425903e+01</td>\n",
       "      <td>4.047759e+01</td>\n",
       "      <td>-7.425905e+01</td>\n",
       "      <td>4.047765e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>-7.399228e+01</td>\n",
       "      <td>4.073658e+01</td>\n",
       "      <td>-7.399159e+01</td>\n",
       "      <td>4.073559e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.500000e+00</td>\n",
       "      <td>-7.398210e+01</td>\n",
       "      <td>4.075337e+01</td>\n",
       "      <td>-7.398062e+01</td>\n",
       "      <td>4.075385e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.250000e+01</td>\n",
       "      <td>-7.396835e+01</td>\n",
       "      <td>4.076752e+01</td>\n",
       "      <td>-7.396542e+01</td>\n",
       "      <td>4.076837e+01</td>\n",
       "      <td>2.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>7.574702e+04</td>\n",
       "      <td>-7.370028e+01</td>\n",
       "      <td>4.091754e+01</td>\n",
       "      <td>-7.370028e+01</td>\n",
       "      <td>4.091756e+01</td>\n",
       "      <td>2.080000e+02</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
       "count  5.418420e+07      5.418420e+07     5.418420e+07       5.418386e+07   \n",
       "mean   1.128510e+01     -7.397550e+01     4.075085e+01      -7.397464e+01   \n",
       "std    1.634578e+01      3.444641e-02     2.689378e-02       3.383861e-02   \n",
       "min    1.000000e-02     -7.425903e+01     4.047759e+01      -7.425905e+01   \n",
       "25%    6.000000e+00     -7.399228e+01     4.073658e+01      -7.399159e+01   \n",
       "50%    8.500000e+00     -7.398210e+01     4.075337e+01      -7.398062e+01   \n",
       "75%    1.250000e+01     -7.396835e+01     4.076752e+01      -7.396542e+01   \n",
       "max    7.574702e+04     -7.370028e+01     4.091754e+01      -7.370028e+01   \n",
       "\n",
       "       dropoff_latitude  passenger_count  \n",
       "count      5.418386e+07     5.418420e+07  \n",
       "mean       4.075121e+01     1.685435e+00  \n",
       "std        3.072447e-02     1.315407e+00  \n",
       "min        4.047765e+01     0.000000e+00  \n",
       "25%        4.073559e+01     1.000000e+00  \n",
       "50%        4.075385e+01     1.000000e+00  \n",
       "75%        4.076837e+01     2.000000e+00  \n",
       "max        4.091756e+01     2.080000e+02  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaned out the fare > 500\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['fare_amount']>500].index)\n",
    "train_cleaned.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5.418418e+07</td>\n",
       "      <td>5.418418e+07</td>\n",
       "      <td>5.418418e+07</td>\n",
       "      <td>5.418384e+07</td>\n",
       "      <td>5.418384e+07</td>\n",
       "      <td>5.418418e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.128684e+01</td>\n",
       "      <td>-7.397550e+01</td>\n",
       "      <td>4.075085e+01</td>\n",
       "      <td>-7.397464e+01</td>\n",
       "      <td>4.075121e+01</td>\n",
       "      <td>1.685349e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>2.073865e+01</td>\n",
       "      <td>3.444641e-02</td>\n",
       "      <td>2.689379e-02</td>\n",
       "      <td>3.383861e-02</td>\n",
       "      <td>3.072448e-02</td>\n",
       "      <td>1.308707e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000e-02</td>\n",
       "      <td>-7.425903e+01</td>\n",
       "      <td>4.047759e+01</td>\n",
       "      <td>-7.425905e+01</td>\n",
       "      <td>4.047765e+01</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>6.000000e+00</td>\n",
       "      <td>-7.399228e+01</td>\n",
       "      <td>4.073658e+01</td>\n",
       "      <td>-7.399159e+01</td>\n",
       "      <td>4.073559e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>8.500000e+00</td>\n",
       "      <td>-7.398210e+01</td>\n",
       "      <td>4.075337e+01</td>\n",
       "      <td>-7.398062e+01</td>\n",
       "      <td>4.075385e+01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.250000e+01</td>\n",
       "      <td>-7.396835e+01</td>\n",
       "      <td>4.076752e+01</td>\n",
       "      <td>-7.396542e+01</td>\n",
       "      <td>4.076837e+01</td>\n",
       "      <td>2.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.396336e+04</td>\n",
       "      <td>-7.370028e+01</td>\n",
       "      <td>4.091754e+01</td>\n",
       "      <td>-7.370028e+01</td>\n",
       "      <td>4.091756e+01</td>\n",
       "      <td>9.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        fare_amount  pickup_longitude  pickup_latitude  dropoff_longitude  \\\n",
       "count  5.418418e+07      5.418418e+07     5.418418e+07       5.418384e+07   \n",
       "mean   1.128684e+01     -7.397550e+01     4.075085e+01      -7.397464e+01   \n",
       "std    2.073865e+01      3.444641e-02     2.689379e-02       3.383861e-02   \n",
       "min    1.000000e-02     -7.425903e+01     4.047759e+01      -7.425905e+01   \n",
       "25%    6.000000e+00     -7.399228e+01     4.073658e+01      -7.399159e+01   \n",
       "50%    8.500000e+00     -7.398210e+01     4.075337e+01      -7.398062e+01   \n",
       "75%    1.250000e+01     -7.396835e+01     4.076752e+01      -7.396542e+01   \n",
       "max    9.396336e+04     -7.370028e+01     4.091754e+01      -7.370028e+01   \n",
       "\n",
       "       dropoff_latitude  passenger_count  \n",
       "count      5.418384e+07     5.418418e+07  \n",
       "mean       4.075121e+01     1.685349e+00  \n",
       "std        3.072448e-02     1.308707e+00  \n",
       "min        4.047765e+01     0.000000e+00  \n",
       "25%        4.073559e+01     1.000000e+00  \n",
       "50%        4.075385e+01     1.000000e+00  \n",
       "75%        4.076837e+01     2.000000e+00  \n",
       "max        4.091756e+01     9.000000e+00  "
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cleaend out passenger_count > 9\n",
    "train_cleaned = train_cleaned.drop(train_cleaned[train_cleaned['passenger_count']>9].index)\n",
    "#final clean data descriptives\n",
    "train_cleaned.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "#sample 25% of the training data\n",
    "sample_data = train_data.sample(frac=.25)\n",
    "#sample_data.tail()\n",
    "#sample_data.to_csv(\"Resources/sample.csv\")\n",
    "sample_data.to_csv('Resources/sample_data_cleaned.csv', sep='\\t')\n",
    "#save the cleaned train data to csv\n",
    "#train_cleaned.to_csv('train_data_cleaned.csv', sep='\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate the distance between pick-up and drop-off spot\n",
    "def distance(row):\n",
    "    \"\"\"\n",
    "    Calculate the Haversine distance.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    origin : tuple of float\n",
    "        (lat, long)\n",
    "    destination : tuple of float\n",
    "        (lat, long)\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    distance_in_km : float\n",
    "\n",
    "    Examples\n",
    "    --------\n",
    "    >>> origin = (48.1372, 11.5756)  # Munich\n",
    "    >>> destination = (52.5186, 13.4083)  # Berlin\n",
    "    >>> round(distance(origin, destination), 1)\n",
    "    504.2\n",
    "    \"\"\"\n",
    "    lat1, lon1 = row['pickup_latitude'], row['pickup_longitude']\n",
    "    lat2, lon2 = row['dropoff_latitude'], row['dropoff_longitude']\n",
    "    radius = 6371  # km\n",
    "\n",
    "    dlat = math.radians(lat2 - lat1)\n",
    "    dlon = math.radians(lon2 - lon1)\n",
    "    a = (math.sin(dlat / 2) * math.sin(dlat / 2) +\n",
    "         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) *\n",
    "         math.sin(dlon / 2) * math.sin(dlon / 2))\n",
    "    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n",
    "    d = radius * c\n",
    "\n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#data sampling\n",
    "test_data = pd.read_csv(\"Resources/test.csv\")\n",
    "#full_data = pd.read_csv(\"Resources/train.csv\")\n",
    "#sample_data = full_data.sample(n=20000)\n",
    "#sample_data.tail()\n",
    "#sample_data.to_csv(\"Resources/sample.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>key</th>\n",
       "      <th>fare_amount</th>\n",
       "      <th>pickup_datetime</th>\n",
       "      <th>pickup_longitude</th>\n",
       "      <th>pickup_latitude</th>\n",
       "      <th>dropoff_longitude</th>\n",
       "      <th>dropoff_latitude</th>\n",
       "      <th>passenger_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>19995</th>\n",
       "      <td>18577093</td>\n",
       "      <td>2011-04-26 10:01:00.000000186</td>\n",
       "      <td>4.10</td>\n",
       "      <td>2011-04-26 10:01:00 UTC</td>\n",
       "      <td>-73.981243</td>\n",
       "      <td>40.774312</td>\n",
       "      <td>-73.983778</td>\n",
       "      <td>40.767743</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19996</th>\n",
       "      <td>53404964</td>\n",
       "      <td>2014-10-01 21:41:34.0000004</td>\n",
       "      <td>28.50</td>\n",
       "      <td>2014-10-01 21:41:34 UTC</td>\n",
       "      <td>-74.007112</td>\n",
       "      <td>40.718224</td>\n",
       "      <td>-73.934912</td>\n",
       "      <td>40.798347</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19997</th>\n",
       "      <td>8754196</td>\n",
       "      <td>2013-08-18 19:56:05.0000002</td>\n",
       "      <td>34.33</td>\n",
       "      <td>2013-08-18 19:56:05 UTC</td>\n",
       "      <td>-73.863623</td>\n",
       "      <td>40.769963</td>\n",
       "      <td>-73.993245</td>\n",
       "      <td>40.736136</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19998</th>\n",
       "      <td>27909592</td>\n",
       "      <td>2009-10-02 19:45:00.000000283</td>\n",
       "      <td>5.70</td>\n",
       "      <td>2009-10-02 19:45:00 UTC</td>\n",
       "      <td>-73.984912</td>\n",
       "      <td>40.759793</td>\n",
       "      <td>-73.991323</td>\n",
       "      <td>40.749993</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19999</th>\n",
       "      <td>33205722</td>\n",
       "      <td>2013-06-10 07:14:54.0000001</td>\n",
       "      <td>21.00</td>\n",
       "      <td>2013-06-10 07:14:54 UTC</td>\n",
       "      <td>-73.992033</td>\n",
       "      <td>40.768967</td>\n",
       "      <td>-73.980294</td>\n",
       "      <td>40.714079</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0                            key  fare_amount  \\\n",
       "19995    18577093  2011-04-26 10:01:00.000000186         4.10   \n",
       "19996    53404964    2014-10-01 21:41:34.0000004        28.50   \n",
       "19997     8754196    2013-08-18 19:56:05.0000002        34.33   \n",
       "19998    27909592  2009-10-02 19:45:00.000000283         5.70   \n",
       "19999    33205722    2013-06-10 07:14:54.0000001        21.00   \n",
       "\n",
       "               pickup_datetime  pickup_longitude  pickup_latitude  \\\n",
       "19995  2011-04-26 10:01:00 UTC        -73.981243        40.774312   \n",
       "19996  2014-10-01 21:41:34 UTC        -74.007112        40.718224   \n",
       "19997  2013-08-18 19:56:05 UTC        -73.863623        40.769963   \n",
       "19998  2009-10-02 19:45:00 UTC        -73.984912        40.759793   \n",
       "19999  2013-06-10 07:14:54 UTC        -73.992033        40.768967   \n",
       "\n",
       "       dropoff_longitude  dropoff_latitude  passenger_count  \n",
       "19995         -73.983778         40.767743                3  \n",
       "19996         -73.934912         40.798347                1  \n",
       "19997         -73.993245         40.736136                1  \n",
       "19998         -73.991323         40.749993                2  \n",
       "19999         -73.980294         40.714079                1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#read in the sampled data\n",
    "data_df = pd.read_csv(\"Resources/sample.csv\")\n",
    "data_df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_df['new_time'] = (data_df['pickup_datetime']).apply(lambda x: datetime.strptime(x, \"%Y-%m-%d %H:%M:%S %Z\"))    \n",
    "data_df = data_df.drop(['Unnamed: 0','key','pickup_datetime'], axis=1)\n",
    "time_range = (data_df['new_time'] > \"2013-01-01\") & (data_df['new_time'] < \"2016-12-31\")\n",
    "ranged_data = data_df.loc[time_range]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ranged_data['distance'] = data_df.apply(distance, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "ranged_data['year'] = data_df['new_time'].apply(lambda x: x.year)\n",
    "ranged_data['hour_of_day'] = data_df['new_time'].apply(lambda x: x.hour)\n",
    "ranged_data['day'] = data_df['new_time'].apply(lambda x: calendar.day_name[x.weekday()])\n",
    "ranged_data['date'] = data_df['new_time'].apply(lambda x: x.date())\n",
    "ranged_data.tail()\n",
    "#plt.scatter(ranged_data['hour_of_day'],ranged_data['fare_amount'])\n",
    "\n",
    "ranged_data = ranged_data[ranged_data['distance'] < 100]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean squared error: 24.977774208489492\n",
      "R²: 0.7963060302006232\n"
     ]
    }
   ],
   "source": [
    "dummied_data = ranged_data\n",
    "\n",
    "for column in dummied_data.columns:\n",
    " if dummied_data[column].dtype==object:\n",
    "  dummyCols=pd.get_dummies(dummied_data[column])\n",
    "  dummied_data=dummied_data.join(dummyCols)\n",
    "  del dummied_data[column]\n",
    "\n",
    "fares = dummied_data['fare_amount']\n",
    "dummied_data.drop(['fare_amount','pickup_longitude', 'pickup_latitude','dropoff_longitude','new_time'], axis=1,inplace=True)\n",
    "\n",
    "\n",
    "model_1=LinearRegression()\n",
    "model_1.fit(dummied_data,fares)\n",
    "coefficients=pd.DataFrame({'name':list(dummied_data),'value':model_1.coef_})\n",
    "print(\"Mean squared error:\",np.mean((model_1.predict(dummied_data) - fares) ** 2))\n",
    "print(\"R²:\",model_1.score(dummied_data, fares))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
